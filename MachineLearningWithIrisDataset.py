# -*- coding: utf-8 -*-
"""Esercizio2Guardasole .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FeL1_OfHd-w3qNx5j-VKeTmnHDnW7kub

# <center> Machine Learning </center>
# <center> How implement a simple Neural Network with Keras </center>
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
import tensorflow as tf
from tensorflow.keras.layers import Input, Dense
from tensorflow.keras.models import Model
from tensorflow.keras.utils import to_categorical

iris_data = load_iris()

print(iris_data['DESCR'])

y = iris_data.target
X = iris_data.data
n_samples, n_features = X.shape
print('number of rows:',n_samples,'  number of column:', n_features)

X_train, X_test, y_tn, y_tt = train_test_split(X, y, test_size = 0.3, random_state = 21, stratify = y)

"""### Transform the target  y (that is a categorical variable) as a dummy matrix, both for training and test"""

y_train = to_categorical(y_tn)
y_test = to_categorical(y_tt)

input = Input(shape = (4,))
x = Dense(40, activation = 'relu')(input)
x = Dense(20, activation = 'relu')(x)
x = Dense(20, activation = 'relu')(x)
output = Dense(3, activation = 'softmax')(x)
model = Model(input, output)

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

"""### Model fitting

"""

history = model.fit(X_train,y_train,epochs=100, validation_data = (X_test,y_test))

"""### history of fitting"""

# Plot training & validation accuracy values
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# Plot training & validation loss values
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()